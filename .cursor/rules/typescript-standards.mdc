# TypeScript Standards

This rule defines the TypeScript coding standards and best practices for the project.

## üìù **Code Formatting**

### **Indentation**
- **Always use 4 spaces** for indentation (never tabs)
- **Consistent indentation** throughout all files
- **No mixed indentation** (spaces + tabs)

### **Line Length**
- **Maximum line length**: 120 characters
- **Break long lines** at logical points
- **Use line breaks** for readability

### **Spacing**
- **Single space** around operators
- **Single space** after commas
- **No trailing spaces**
- **Single blank line** between logical sections

## üèóÔ∏è **TypeScript Best Practices**

### **Type Safety**
- **Always use explicit types** for function parameters and return values
- **Avoid `any` type** - use proper TypeScript types
- **Use `unknown`** instead of `any` when type is truly unknown
- **Leverage type inference** where types are obvious

### **Database ID Patterns**
- **Primary Keys**: Use `z.bigint().positive()` for auto-incrementing IDs
- **Route Parameters**: Use `z.coerce.number().int().positive()` for ID validation
- **ID Types**: Always use `bigint` for database IDs, `number` for route params
- **Validation**: Ensure IDs are positive integers with proper error messages

### **Interfaces vs Types**
- **Use interfaces** for object shapes and contracts
- **Use types** for unions, intersections, and complex type operations
- **Extend interfaces** rather than creating new ones when possible

### **Import/Export**
- **Use named imports/exports** for better tree-shaking
- **Use `import type`** for type-only imports
- **Group imports** by: external libraries, internal modules, types
- **Alphabetical order** within each group

### **Error Handling**
- **Extend Error class** for custom errors
- **Implement proper interfaces** (FastifyError, etc.)
- **Use type guards** for runtime type checking
- **Avoid type assertions** when possible

## üìÅ **File Organization**

### **File Naming**
- **kebab-case** for file names: `user-model.ts`
- **PascalCase** for classes: `UserModel`
- **camelCase** for functions and variables: `getUserById`

### **Export Patterns**
- **Named exports** for most cases
- **Default exports** only for main entry points
- **Barrel exports** in index files

## üß™ **Testing Standards**

### **Test Files**
- **Test file naming**: `*.test.ts` or `*.spec.ts`
- **Test organization**: Arrange, Act, Assert pattern
- **Mock external dependencies**
- **Test both success and failure cases**

## üîç **Code Quality**

### **ESLint Rules**
- **Follow project ESLint configuration**
- **Fix all linting errors** before committing
- **Use meaningful variable names**
- **Avoid magic numbers** - use constants

### **Documentation**
- **JSDoc comments** for public APIs
- **Inline comments** for complex logic
- **README files** for modules and packages

## üìö **Examples**

### **Good TypeScript Code:**
```typescript
interface User {
    id: bigint;           // ‚úÖ BIGINT for database IDs
    name: string;
    email: string;
}

class UserService {
    async getUserById(id: number): Promise<User | null> {  // ‚úÖ number for route params
        // Implementation
    }
}

export { UserService };
export type { User };
```

### **Avoid:**
```typescript
// ‚ùå Bad: No types, any usage
function getUser(id: any): any {
    return db.users.find(u => u.id === id);
}

// ‚ùå Bad: Mixed indentation
function badFunction() {
  const x = 1;
    const y = 2;
}
```

## üîó **Related Rules**
- [Project Structure](mdc:.cursor/rules/project-structure.mdc)
- [Error Handling Standards](mdc:.cursor/rules/error-handling.mdc)
- [Development Workflow](mdc:.cursor/rules/development-workflow.mdc)
